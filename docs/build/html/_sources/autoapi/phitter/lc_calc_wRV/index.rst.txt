:py:mod:`phitter.lc_calc_wRV`
=============================

.. py:module:: phitter.lc_calc_wRV


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   phitter.lc_calc_wRV.single_star_lc
   phitter.lc_calc_wRV.binary_star_lc
   phitter.lc_calc_wRV.phased_obs
   phitter.lc_calc_wRV.dist_ext_mag_calc
   phitter.lc_calc_wRV.flux_adj
   phitter.lc_calc_wRV.binary_mags_calc



Attributes
~~~~~~~~~~

.. autoapisummary::

   phitter.lc_calc_wRV.kp_filt
   phitter.lc_calc_wRV.h_filt


.. py:data:: kp_filt

   

.. py:data:: h_filt

   

.. py:function:: single_star_lc(stellar_params, use_blackbody_atm=False, num_triangles=1500)


.. py:function:: binary_star_lc(star1_params, star2_params, binary_params, observation_times, filts_list=[kp_filt, h_filt], use_blackbody_atm=False, use_compact_object=False, irrad_frac_refl=1.0, make_mesh_plots=False, mesh_temp=False, mesh_temp_cmap=None, plot_name=None, print_diagnostics=False, par_compute=False, num_par_processes=8, num_triangles=1500)

   
   Compute the light curve for a binary system


   :Parameters:

       **star1_params** : tuple
           Tuple of parameters for the primary star

       **star2_params** : tuple
           Tuple of parameters for the secondary star

       **binary_params** : tuple
           Tuple of parameters for the binary system configuration

       **observation_times** : tuple of numpy arrays
           Tuple of observation times, with tuple length equal to [number of
           photometric filters] + [1: for RV observation times].
           Expects an iterable list or 1d numpy array of MJDs for each band
           and for the RVs.
           For example for photometry in Kp and H:
           (kp_MJDs, h_MJDs, rv_MJDs) = observation_times

       **use_blackbody_atm** : bool, default=False
           Use blackbody atmosphere instead of default Castelli & Kurucz
           atmosphere. Default: False (i.e.: using a C&K atm by default)

       **use_compact_object** : bool, default=False
           If true, sets eclipse_method to 'only_horizon', necessary for compact
           companions without eclipses. Default: False

       **make_mesh_plots** : bool, default=False
           Make a mesh plot of the binary system (default False)

       **plot_name** : str, default=None
           ..

       **print_diagnostics** : bool, default=False
           ..

       **par_compute** : bool, default=False
           ..

       **num_par_processes** : int, default=8
           ..














   ..
       !! processed by numpydoc !!

.. py:function:: phased_obs(observation_times, binary_period, t0, filts_list=[kp_filt, h_filt])

   
   Phase observation times to a given binary period and t0
















   ..
       !! processed by numpydoc !!

.. py:function:: dist_ext_mag_calc(input_mags, target_dist, filt_exts)


.. py:function:: flux_adj(mags_pri, mags_ref_pri, mags_sec, mags_ref_sec, mags_bin)

   
   Perform flux adjustment for binary magnitudes
   * Uses calculated and reference single star magnitudes for binary components
   * Derives adjustment to binary magnitude based on the discrepancy
   * Applies correction to the calculated binary magnitudes

   Keyword arguments:
   mags_pri -- Model calculated magnitudes (Kp, H) of primary
   mags_ref_pri -- Reference magnitudes (Kp, H) of primary
   mags_sec -- Model calculated magnitudes (Kp, H) of secondary
   mags_ref_sec -- Reference magnitudes (Kp, H) of secondary
   mags_bin -- Model calculated magnitudes ([Kp], [H]) of the binary system















   ..
       !! processed by numpydoc !!

.. py:function:: binary_mags_calc(star1_params_lcfit, star2_params_lcfit, binary_params, observation_times, isoc_Ks_ext, filt_exts, ext_alpha, isoc_dist, bin_dist, filts_list=[kp_filt, h_filt], use_blackbody_atm=False, use_compact_object=False, irrad_frac_refl=1.0, make_mesh_plots=False, mesh_temp=False, mesh_temp_cmap=None, plot_name=None, par_compute=False, num_par_processes=8, num_triangles=1500, print_diagnostics=False)


